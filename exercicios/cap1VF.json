{
"title": "Cap. 1 - Introdução",  
"questions": [
  {
    "text": "Complexidade, conformidade, portabilidade e invisibilidade são dificuldades essenciais em Engenharia de Software.",
    "correct": "false"
  },
  {
    "text": "Toda dificuldade essencial é acidental, mas o contrário não é verdade.",
    "correct": "false"
  },
  {
    "text": "São exemplos de requisitos não-funcionais: usabilidade, segurança, desempenho e confiabilidade.",
    "correct": "true"
  },
  {
    "text": "Arquitetura trata de projeto em nível de classes, métodos e atributos.",
    "correct": "false"
  },
  {
    "text": "Verificação de software preocupa-se em garantir que o sistema está de acordo com seus requisitos, isto é, com sua especificação.",
    "correct": "true"
  },
  {
    "text": "Validação de software preocupa-se em garantir que o sistema é aquele que o cliente quer.",
    "correct": "true"
  },
  {
    "text": "Todo defeito é causado por uma falha; mas nem toda falha é causada por um defeito.",
    "correct": "false"
  },
  {
    "text": "Uma das formas de reduzir o atraso de um projeto de software é aumentando o tamanho do time de desenvolvedores.",
    "correct": "false"
  },
  {
    "text": "Gerência de configuração trata dos arquivos de configuração de um sistema, como arquivos .INI.",
    "correct": "false"
  },
  {
    "text": "Manutenção corretiva tem como objetivo corrigir bugs reportados por usuários.",
    "correct": "true"
  },
  {
    "text": "Manutenção preventiva tem com objetivo corrigir bugs latentes, que ainda não causaram falhas.",
    "correct": "true"
  },
  {
    "text": "Refactorings são modificações realizadas em um software que preservam o seu comportamento e visam exclusivamente a melhoria do código ou projeto.",
    "correct": "true"
  },
  {
    "text": "Sistemas legados são sistemas antigos, baseados em linguagens e bancos de dados ultrapassados.",
    "correct": "true"
  },
  {
    "text": "São fatores de qualidade externa: correção, robustez, facilidade de uso e modularidade.",
    "correct": "false"
  },
  {
    "text": "São exemplos de refactorings: extração de um método menor (a partir de um método maior); renomear uma variável local; mover um método para uma classe mais apropriada.",
    "correct": "true"
  },
  {
    "text": "Com o impacto crescente da profissão, códigos de ética ajudam a clarificar os princípios de conduta que devem ser observados por engenheiros de software.",
    "correct": "true"
  },
  {
    "text": "Uma empresa X decidiu terceirizar o desenvolvimento de um sistema S com uma empresa Y. Então, como é uma empresa externa, Y não é um dos stakeholders do sistema S.",
    "correct": "false"
  },
  {
    "text": "Um desenvolvedor X levou 6 meses para desenvolver sozinho um certo sistema. Logo, de acordo com a Lei de Brooks, se tivéssemos alocado um segundo desenvolvedor Y no projeto, com o mesmo nível de proficiência de X, o desenvolvimento teria terminado em 3 meses.",
    "correct": "false"
  },
]
}	 