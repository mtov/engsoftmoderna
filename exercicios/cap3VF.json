{
"title": "Cap. 3 - Requisitos",  
"questions": [
  {
    "text": "Requisitos definem o que um sistema deve fazer e sob quais restrições.",
    "correct": "true"
  },
  {
    "text": "Requisitos não-funcionais, na maioria das vezes, são especificados em linguagem natural.",
    "correct": "false"
  },
  {
    "text": "Requisitos funcionais, na maioria das vezes, são especificados de forma quantitativa usando-se métricas.",
    "correct": "false"
  },
  {
    "text": "Requisitos devem ser corretos, subjetivos, completos, consistentes e verificáveis.",
    "correct": "false"
  },
  {
    "text": "Histórias de usuários possuem três partes, todas começando com a letra C: Cartão, Conversas e Código.",
    "correct": "false"
  },
  {
    "text": "A sigla INVEST lembra que histórias de usuários devem ser independentes, negociáveis, agregar valor, estimáveis, sucintas e testáveis.",
    "correct": "true"
  },
  {
    "text": "Histórias de usuários classificadas como épicas devem ficar no topo do backlog do produto.",
    "correct": "false"
  },
  {
    "text": "Sempre que possível, casos de uso devem tratar de aspectos tecnológicos ou de design.",
    "correct": "false"
  },
  {
    "text": "Casos de uso são especificações de requisitos mais detalhadas e completas do que histórias de usuários.",
    "correct": "true"
  },
  {
    "text": "Gold plating designa a situação na qual os desenvolvedores decidem, por conta própria, sofisticar a implementação de alguns requisitos.",
    "correct": "true"
  },
  {
    "text": "Extensões de um caso de uso representam alternativas de execução ou então situações de erro.",
    "correct": "true"
  },
  {
    "text": "Apenas startups devem usar MVPs, sempre antes da fase de crescimento da empresa.",
    "correct": "false"
  },
  {
    "text": "Quando se faz um teste A/A, ele vai falhar em 100% dos casos.",
    "correct": "false"
  },
  {
    "text": "Em Engenharia de Software, MVPs podem ser vistos como técnicas de validação de requisitos.",
    "correct": "true"
  },
  {
    "text": "Quanto menor o efeito que se deseja medir com testes A/B, maior deve ser o tamanho da amostra.",
    "correct": "true"
  },
  {
    "text": "Quando o mercado é estável e bem conhecido, não há necessidade de construir MVPs. ",
    "correct": "true"
  },
  {
    "text": "Para aplicar testes A/B, precisamos de duas versões de um sistema: controle e tratamento.",
    "correct": "true"
  },
  {
    "text": "Um pivô ocorre quando se abandona a visão original de um sistema e tenta-se um novo MVP.",
    "correct": "true"
  },
  {
    "text": "São exemplos de requisitos não-funcionais: desempenho, confiabilidade, robustez, usabilidade e modularidade.",
    "correct": "false"
  },
  {
    "text": "Quando se usa métodos ágeis, requisitos não-funcionais devem fazer parte dos critérios de conclusão de histórias de usuários (done criteria).",
    "correct": "true"
  },
  {
    "text": "O nível de abstração usado na escrita de casos de uso deve ser similar àquele que usamos para definir algoritmos.",
    "correct": "false"
  },
  {
    "text": "Em um MVP, os desenvolvedores decidem o que é mínimo e os clientes decidem se o produto é viável.",
    "correct": "true"
  },
  {
    "text": "Em um MVP, otimizações prematuras devem ser evitadas, pois não temos certeza de que o produto será bem sucedido.",
    "correct": "true"
  },
  {
    "text": "Um MVP deve sempre implementar e automatizar tarefas de back-office — como pagamentos, entregas e cancelamentos — pois elas são fundamentais para uma boa experiência dos clientes.",
    "correct": "false"
  },
  {
    "text": "Implementação de testes automatizados, incluindo testes de unidade e de integração, é muito importante em MVPs.",
    "correct": "false"
  },
  {
    "text": "Seis meses já pode ser considerado um prazo longo para o lançamento do primeiro MVP de um sistema.",
    "correct": "true"
  },
  {
    "text": "Testes de aceitação de histórias são definidos pelo líder técnico do time.",
    "correct": "false"
  },
  {
    "text": "Como exemplos de critérios de conclusão de histórias (done criteria) podemos citar a implementação de testes automatizados e a revisão do código por pelo menos um segundo desenvolvedor.",
    "correct": "true"
  }
]
}	    